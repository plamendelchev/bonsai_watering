# Configuration for telegraf agent
[agent]
  ## Default data collection interval for all inputs
  interval = "10s"
  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true

  ## Telegraf will send metrics to outputs in batches of at most
  ## metric_batch_size metrics.
  ## This controls the size of writes that Telegraf sends to output plugins.
  metric_batch_size = 100

  ## Maximum number of unwritten metrics per output.  Increasing this value
  ## allows for longer periods of output downtime without dropping metrics at the
  ## cost of higher maximum memory usage.
  metric_buffer_limit = 1000

  ## Collection jitter is used to jitter the collection by a random amount.
  ## Each plugin will sleep for a random time within jitter before collecting.
  ## This can be used to avoid many plugins querying things like sysfs at the
  ## same time, which can have a measurable effect on the system.
  collection_jitter = "0s"

  ## Default flushing interval for all outputs. Maximum flush_interval will be
  ## flush_interval + flush_jitter
  flush_interval = "10s"
  ## Jitter the flush interval by a random amount. This is primarily to avoid
  ## large write spikes for users running a large number of telegraf instances.
  ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "0s"

  ## By default or when set to "0s", precision will be set to the same
  ## timestamp order as the collection interval, with the maximum being 1s.
  ##   ie, when interval = "10s", precision will be "1s"
  ##       when interval = "250ms", precision will be "1ms"
  ## Precision will NOT be used for service inputs. It is up to each individual
  ## service input to set the timestamp at the appropriate precision.
  ## Valid time units are "ns", "us" (or "Âµs"), "ms", "s".
  precision = ""

  ## Log at debug level.
  debug = true
  ## Log only error level messages.
  quiet = false

  ## Log target controls the destination for logs and can be one of "file",
  ## "stderr" or, on Windows, "eventlog".  When set to "file", the output file
  ## is determined by the "logfile" setting.
  logtarget = "stderr"

  ## Name of the file to be logged to when using the "file" logtarget.  If set to
  ## the empty string then logs are written to stderr.
  # logfile = ""

  ## The logfile will be rotated after the time interval specified.  When set
  ## to 0 no time based rotation is performed.  Logs are rotated only when
  ## written to, if there is no log activity rotation may be delayed.
  # logfile_rotation_interval = "0d"

  ## The logfile will be rotated when it becomes larger than the specified
  ## size.  When set to 0 no size based rotation is performed.
  # logfile_rotation_max_size = "0MB"

  ## Maximum number of rotated archives to keep, any older logs are deleted.
  ## If set to -1, no archives are removed.
  # logfile_rotation_max_archives = 5

  ## Pick a timezone to use when logging or type 'local' for local time.
  ## Example: America/Chicago
  # log_with_timezone = ""

  ## Override default hostname, if empty use os.Hostname()
  hostname = ""
  ## If set to true, do no set the "host" tag in the telegraf agent.
  omit_hostname = true


###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################

# Configuration for sending metrics to InfluxDB
#[[outputs.socket_writer]]
#  address = "udp://0.0.0.0:8089"
#  data_format = "influx"

[[outputs.file]]
  alias = "output-debug"
  files = [ "stdout" ]
  data_format = "influx"

## QuestDB TCP socket
[[outputs.socket_writer]]
  alias = "output-questdb"
  ## URL to connect to
  address = "${OUTPUT_QUESTDB_HOST}"
  ## Data format to output.
  data_format = "influx"
  ## Optional TLS Config
  # tls_ca = "/etc/telegraf/ca.pem"
  # tls_cert = "/etc/telegraf/cert.pem"
  # tls_key = "/etc/telegraf/key.pem"
  ## Use TLS but skip chain & host verification
  # insecure_skip_verify = false
  ## Period between keep alive probes.
  # keep_alive_period = "5m"


###############################################################################
#                            INPUT PLUGINS                                    #
###############################################################################

# Configuration for consuming metrics from MQTT
[[inputs.mqtt_consumer]]
  ## Specifies a prefix to attach to the measurement name.
  name_prefix = "bonsai_"
  ## Broker URLs for the MQTT server or cluster.
	servers = [ "${INPUT_MQTT_HOST}" ]
  ## Topics that will be subscribed to.
	topics = [
    "bonsai/status/#"
	]
  ## The message topic will be stored in a tag specified by this value.  If set
  ## to the empty string no topic tag will be created.
  topic_tag = ""
  ## QoS policy for messages
  qos = 1
  ## Connection timeout for initial connection in seconds
  connection_timeout = "5s"

  ## Username and password to connect MQTT server.
  username = "${INPUT_MQTT_USERNAME}"
  password = "${INPUT_MQTT_PASSWORD}"

  ## Data format to consume.
  data_format = "json_v2"

  ## Enable extracting tag values from MQTT topics
  ## _ denotes an ignored entry in the topic path
  [[inputs.mqtt_consumer.topic_parsing]]
    topic = "+/+/+"
    measurement = "_/_/measurement"
    tags = "_/query/_"

  [[inputs.mqtt_consumer.topic_parsing]]
    topic = "+/+/plants/+"
    measurement = "_/_/measurement/+"
    tags = "_/query/_/name"

  [[inputs.mqtt_consumer.json_v2]]
    timestamp_path = "ts"
    timestamp_format = "unix"
    timestamp_timezone = "Europe/Sofia"
    # /common
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "temp"
      type = "int"
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "humidity"
      type = "int"
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "sunlight"
      type = "int"
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "reservoir_alert"
      type = "bool"
    # /board
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "raw_temp"
      type = "int"
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "mem_alloc"
      type = "int"
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "mem_free"
      type = "int"
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "mem_total"
      type = "int"
    # /plant
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "pump"
      type = "bool"
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "sprayer"
      type = "bool"
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "moisture"
      type = "int"
